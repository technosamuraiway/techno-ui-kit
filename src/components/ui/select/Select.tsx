import { CSSProperties, ComponentPropsWithRef, useMemo, useState } from 'react'

import { DownIcon, UpIcon } from '@/assets/icons'
import { Typography } from '@/components'
import { Scrollbar } from '@/components/ui/scrollbar/Scrollbar'
import * as S from '@radix-ui/react-select'
import { clsx } from 'clsx'

import s from './Select.module.scss'

/*
 *  1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ select –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ props => selectHeight –∏ selectWidth
 *     selectHeight - –≤—ã—Å–æ—Ç–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
 *     selectWidth - –∏—Ä–∏–Ω–∞ trigger –∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
 *
 *  2. –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —à–∏—Ä–∏–Ω—ã trigger –∏ content => —Ç–µ–≥—É Content –¥–æ–±–∞–≤–∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç position={'popper'}
 *     –≤ —Å—Ç–∏–ª—è—Ö –¥–ª—è s.content –¥–æ–±–∞–≤–∏—Ç—å => width: var(--radix-select-trigger-width); max-height: var(--radix-select-content-available-height)
 *
 *  3. –∏–º–µ–Ω–Ω–æ —Ç–µ–≥ Viewport –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
 *
 *  4. —Ç–µ–≥ picture —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∏—Ä–∏–Ω—É —Å–≤–æ–µ–≥–æ —Ç–µ–≥–∞, —Ç.–µ. –µ—Å–ª–∏ img –∏–º–µ–µ—Ç —à–∏—Ä–∏–Ω—É 24px, —Ç–æ picture —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–µ–±–µ —à–∏—Ä–∏–Ω—É 32px
 *     => –±—É–¥–µ–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∫–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ props
 *
 *  5. —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–µ–π –æ–±–µ—Ä—Ç–∫–∏ div, –∫–æ–≥–¥–∞ label –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –∏ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞,
 *     –∫–æ–≥–¥–∞ label –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç =>
 *                                  5.1 –í—ã–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É S.Root –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SelectRoot
 *                                  5.2 –í –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ Select –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ label
 *                                  5.3 –ï—Å–ª–∏ label –µ—Å—Ç—å, –º—ã —Ä–µ–Ω–¥–µ—Ä–∏–º div —Å label –∏ SelectRoot
 *                                  5.4 –ï—Å–ª–∏ label –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –º—ã –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º SelectRoot –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±–µ—Ä—Ç–∫–∏.
 *
 * */

export type SelectOptionType = {
  disabled?: boolean
  icon?: { png: string; webp: string }
  label: number | string
  value: string
}

interface ISelect extends ComponentPropsWithRef<typeof S.Root> {
  containerStyle?: CSSProperties | string
  contentStyle?: CSSProperties | string
  currentValue: string
  disabled?: boolean
  label?: string
  labelStyle?: CSSProperties | string
  onValueChange: (value: string) => void
  options: SelectOptionType[]
  selectHeight?: string
  selectWidth?: string
  triggerStyle?: CSSProperties | string
}

export const Select = ({
  containerStyle,
  contentStyle,
  currentValue,
  disabled,
  label,
  labelStyle,
  onValueChange,
  options,
  selectHeight,
  selectWidth,
  triggerStyle,
  ...rest
}: ISelect) => {
  const [isOpen, setIsOpen] = useState(false)
  /* üü¢—Ñ–∏—á–∞ => —á—Ç–æ–±—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ label –æ—Ç–∫—Ä—ã–≤–∞–ª—Å—è SelectRoot */
  const handleOpenChange = (open: boolean) => {
    setIsOpen(open)
  }

  const handleLabelClick = () => {
    setIsOpen(prev => !prev)
  }

  const selectRoot = (
    <SelectRoot
      contentStyle={contentStyle}
      currentValue={currentValue}
      disabled={disabled}
      handleOpenChange={handleOpenChange}
      isOpen={isOpen}
      onValueChange={onValueChange}
      options={options}
      selectHeight={selectHeight}
      selectWidth={label ? undefined : selectWidth}
      triggerStyle={triggerStyle}
      {...rest}
    />
  )

  if (label) {
    return (
      <div className={clsx(s.container, containerStyle)} style={{ width: selectWidth }}>
        <Typography
          as={'label'}
          className={clsx(s.label, labelStyle)}
          onClick={handleLabelClick}
          variant={'regular-text-14'}
        >
          {label}
        </Typography>
        {selectRoot}
      </div>
    )
  }

  return selectRoot
}

interface iSelectRoot extends Omit<ISelect, 'containerStyle' | 'label' | 'labelStyle'> {
  handleOpenChange: (isOpen: boolean) => void
  isOpen: boolean
}

const SelectRoot = ({
  contentStyle,
  currentValue,
  disabled,
  handleOpenChange,
  isOpen,
  onValueChange,
  options,
  selectHeight,
  selectWidth,
  triggerStyle,
  ...rest
}: iSelectRoot) => {
  /* üü¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
   * –°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ options –≤ –æ–±—ä–µ–∫—Ç.
   * –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ useMemo –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
   * –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ option.
   * */
  const optionsMemo = useMemo(() => {
    return options.reduce(
      (acc, item) => {
        acc[item.value] = { ...item }

        return acc
      },
      {} as Record<string, SelectOptionType>
    )
  }, [options])
  /* –î–æ—Å—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ trigger */
  const option = optionsMemo[currentValue]

  return (
    <S.Root
      disabled={disabled}
      onOpenChange={handleOpenChange}
      onValueChange={onValueChange}
      open={isOpen}
      value={currentValue}
      {...rest}
    >
      <S.Trigger className={clsx(s.trigger, triggerStyle)} style={{ width: selectWidth }}>
        <SelectOption {...option} />
        {isOpen ? <UpIcon height={24} width={24} /> : <DownIcon height={24} width={24} />}
      </S.Trigger>

      <S.Portal>
        <S.Content
          className={clsx(s.content, contentStyle)}
          position={'popper'}
          side={'bottom'}
          style={{ height: selectHeight }}
        >
          <S.Viewport asChild>
            <Scrollbar>
              {options.map(item => (
                <S.Item
                  className={s.item}
                  disabled={item.disabled}
                  key={item.value}
                  value={item.value}
                >
                  <SelectOption {...item} />
                </S.Item>
              ))}
            </Scrollbar>
          </S.Viewport>
        </S.Content>
      </S.Portal>
    </S.Root>
  )
}

/* SelectOption –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Trigger –∏ Item */
const SelectOption = ({ icon, label, value }: SelectOptionType) => {
  return (
    <>
      {icon && (
        <picture className={s.picture}>
          <source srcSet={icon?.webp} type={'image/webp'} />
          <img alt={`${value} - flag`} src={icon?.png} />
        </picture>
      )}

      <Typography as={'span'} variant={'regular-text-14'}>
        {label}
      </Typography>
    </>
  )
}
